{"version":3,"sources":["ListItems.js","App.js","serviceWorker.js","index.js"],"names":["ListItems","props","items","map","item","className","key","type","id","value","text","onChange","e","setUpdate","target","onClick","deleteItem","icon","duration","easing","library","add","faTrash","App","state","currentItem","handleInput","bind","addItem","event","this","setState","Date","now","preventDefault","newItem","console","log","newitems","filteredItems","filter","onSubmit","placeholder","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"qUA4BeA,MAvBf,SAAmBC,GACf,IACMD,EADQC,EAAMC,MACIC,KAAI,SAAAC,GACxB,OAAO,yBAAKC,UAAU,OAAOC,IAAKF,EAAKE,KAChC,2BAAG,2BAAOC,KAAK,OAAOC,GAAIJ,EAAKE,IAAKG,MAAOL,EAAKM,KAAMC,SAAU,SAACC,GAChEX,EAAMY,UAAUD,EAAEE,OAAOL,MAAML,EAAKE,QACrC,8BAEA,kBAAC,IAAD,CAAiBD,UAAU,UAAUU,QAAS,WAC1Cd,EAAMe,WAAWZ,EAAKE,MACvBW,KAAK,gBAMnB,OAEA,6BAAK,kBAAC,IAAD,CAAUC,SAAU,IAAKC,OAAO,eACpCnB,K,eCjBLoB,IAAQC,IAAIC,K,IAqFGC,E,kDAjFf,WAAYtB,GAAO,IAAD,8BAChB,cAAMA,IACHuB,MAAM,CACTtB,MAAM,GACNuB,YAAY,CACVf,KAAK,GACLJ,IAAI,KAGR,EAAKoB,YAAc,EAAKA,YAAYC,KAAjB,gBACnB,EAAKC,QAAU,EAAKA,QAAQD,KAAb,gBACf,EAAKX,WAAa,EAAKA,WAAWW,KAAhB,gBAClB,EAAKd,UAAY,EAAKA,UAAUc,KAAf,gBAZC,E,wDAeNE,GACVC,KAAKC,SAAS,CACTN,YAAY,CACVf,KAAKmB,EAAMf,OAAOL,MAClBH,IAAI0B,KAAKC,W,8BAIVJ,GACNA,EAAMK,iBACN,IAAMC,EAAUL,KAAKN,MAAMC,YAE3B,GADAW,QAAQC,IAAIF,GACM,KAAfA,EAAQzB,KACX,CACE,IAAM4B,EAAS,GAAD,mBAAKR,KAAKN,MAAMtB,OAAhB,CAAsBiC,IACpCL,KAAKC,SAAS,CACZ7B,MAAMoC,EACNb,YAAY,CACVf,KAAK,GACLJ,IAAI,S,iCAMDA,GACT,IAAMiC,EAAgBT,KAAKN,MAAMtB,MAAMsC,QAAO,SAAApC,GAAI,OAAEA,EAAKE,MAAQA,KACjEwB,KAAKC,SAAS,CACZ7B,MAAMqC,M,gCAIA7B,EAAKJ,GACb8B,QAAQC,IAAI,SAASP,KAAKN,MAAMtB,OAChC,IAAMA,EAAQ4B,KAAKN,MAAMtB,MACzBA,EAAMC,KAAI,SAAAC,GACLA,EAAKE,MAAQA,IACd8B,QAAQC,IAAIjC,EAAKE,IAAK,OAAOA,GAC7BF,EAAKM,KAAMA,MAGfoB,KAAKC,SAAS,CACZ7B,MAAOA,M,+BAOT,OACE,yBAAKG,UAAU,OACf,wCACO,gCACA,0BAAMG,GAAG,UAAUiC,SAAUX,KAAKF,SAClC,2BAAOrB,KAAK,OAAOmC,YAAY,kBAAkBjC,MAAOqB,KAAKN,MAAMC,YAAYf,KAC/EC,SAAUmB,KAAKJ,cACf,4BAAQnB,KAAK,UAAb,SAIA,kBAAC,EAAD,CAAWL,MAAO4B,KAAKN,MAAMtB,MAAOc,WAAYc,KAAKd,WAAYH,UAAWiB,KAAKjB,iB,GA7E1E8B,IAAMC,WCGJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL1B,QAAQ0B,MAAMA,EAAMC,c","file":"static/js/main.5af54b62.chunk.js","sourcesContent":["import React from 'react';\nimport './ListItem.css';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport FlipMove from 'react-flip-move';\n\nfunction ListItems(props){\n    const items = props.items;\n    const ListItems = items.map(item =>{\n        return <div className=\"list\" key={item.key}>\n               <p><input type=\"text\" id={item.key} value={item.text} onChange={(e)=>{\n                props.setUpdate(e.target.value,item.key)}}/>\n               <span>\n       \n               <FontAwesomeIcon className=\"faicons\" onClick={() => {\n                   props.deleteItem(item.key)\n               }} icon=\"trash\" />\n               </span>\n               </p>\n             \n              </div>\n    })\n    return(\n    //  <h1>From ListItems.js</h1>\n    <div><FlipMove duration={300} easing=\"ease-in-out\">\n    {ListItems}\n    </FlipMove></div>\n    )\n}\nexport default ListItems;","import React from 'react';\n//import logo from './logo.svg';\nimport './App.css';\nimport ListItems from './ListItems';\nimport { library } from '@fortawesome/fontawesome-svg-core'\nimport { faTrash } from '@fortawesome/free-solid-svg-icons'\n\nlibrary.add(faTrash)\n\nclass App extends React.Component{\n\nconstructor(props){\n  super(props);\nthis.state={\n  items:[],\n  currentItem:{\n    text:'',\n    key:''\n  }\n}\nthis.handleInput = this.handleInput.bind(this);\nthis.addItem = this.addItem.bind(this);\nthis.deleteItem = this.deleteItem.bind(this);\nthis.setUpdate = this.setUpdate.bind(this);\n\n}\nhandleInput(event){\n  this.setState({\n       currentItem:{\n         text:event.target.value,\n         key:Date.now()\n       }\n  })\n}\naddItem(event){\n  event.preventDefault();\n  const newItem = this.state.currentItem;\n  console.log(newItem);\n  if(newItem.text!==\"\")\n  {\n    const newitems=[...this.state.items,newItem];\n    this.setState({\n      items:newitems,\n      currentItem:{\n        text:'',\n        key:''\n      }\n    })\n  }\n}\n//deleting the record\ndeleteItem(key){\n  const filteredItems = this.state.items.filter(item=>item.key !== key);\n  this.setState({\n    items:filteredItems\n  })\n}\n//updating record in todo list\nsetUpdate(text,key){\n  console.log(\"items:\"+this.state.items);\n  const items = this.state.items;\n  items.map(item =>{      \n    if(item.key === key){\n      console.log(item.key +\"    \"+key)\n      item.text= text;\n    }\n  })\n  this.setState({\n    items: items\n  })\n  \n \n}\n\n  render(){\n  return (\n    <div className=\"App\">\n    <h1>Todo App</h1>\n           <header>\n           <form id=\"todoFrm\" onSubmit={this.addItem}>\n           <input type=\"text\" placeholder=\"Enter text here\" value={this.state.currentItem.text}\n           onChange={this.handleInput}/>\n           <button type=\"submit\">Add</button>\n           \n           </form>\n           </header>\n           <ListItems items={this.state.items} deleteItem={this.deleteItem} setUpdate={this.setUpdate} />\n           </div>\n  );\n}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}